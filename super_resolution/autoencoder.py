# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/autoencoder.ipynb (unless otherwise specified).

__all__ = ['PicturesDataset']

# Cell
# imports

import glob
import matplotlib.pyplot as plt

import torch
import numpy as np
import torch.nn as nn
from PIL import Image
from torchvision import transforms
from torch.utils.data import Dataset, DataLoader

# Cell
class PicturesDataset(Dataset):


    def __init__(self,
                 mode,
                 trans_list):

        # Assertions to avoid wrong inputs
        assert mode in ['train', 'val', 'test']

        # Directory setup
        data_dirs = {'train': './data/train',
                     'val': './data/val',
                     'test': './data/test'}

        self.data_dir = data_dirs[mode]
        self.mode = mode
        self.trans_list = trans_list

        if mode != 'test':
            self.file_names_lr = sorted(glob.glob(f'{self.data_dir}/lr/*.png'))
            self.file_names_hr = sorted(glob.glob(f'{self.data_dir}/hr/*.png'))

        else:
            self.file_names_lr = []
            for dir in os.listdir(self.data_dir):
                self.file_names_lr += glob.glob(f'{self.data_dir}/{dir}/*.png')
            self.file_names_lr = sorted(self.file_names_lr)


    def __len__(self):
        return len(self.file_names_lr)


    def __getitem__(self, idx):

        pic_lr = Image.open(self.file_names_lr[idx])
        pic_lr = transforms.ToTensor()(pic_lr)

        pic_lr_mean = torch.mean(pic_lr)
        pic_lr_std = torch.std(pic_lr)
        pic_lr = (pic_lr - pic_lr_mean) / pic_lr_std

        pic_lr_h, pic_lr_w = pic_lr.shape[1], pic_lr.shape[2]
        pic_lr = transforms.Resize([4*pic_lr_h, 4*pic_lr_w])(pic_lr)

        if self.mode != 'test':
            pic_hr = Image.open(self.file_names_hr[idx])
            pic_hr = transforms.ToTensor()(pic_hr)
            pic_hr = (pic_hr - torch.mean(pic_hr)) / torch.std(pic_hr)

            return pic_lr, pic_hr

        else:
            pic_lr_size = pic_lr_h, pic_lr_w
            pic_lr_norm_params = pic_lr_mean, pic_lr_std

            return pic_lr, pic_lr_size, pic_lr_norm_params
